#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    strata = require("../lib/index"),
    utils = strata.utils;

var app,
    appfile = path.resolve("./app.js"),
    options = {},
    exit = false,
    arg;

for (var i = 2; i < process.argv.length; ++i) {
    if (exit) {
        break;
    }

    arg = process.argv[i];

    function nextArg(defaultValue) {
        var next = process.argv[++i] || defaultValue;

        if (!next) {
            printUsage();
            exit = true;
        }

        return next;
    }

    switch (arg) {
    case "-a":
    case "--address":
        options.host = nextArg();
        break;
    case "-c":
    case "--cert":
        var certfile = nextArg();
        if (path.existsSync(certfile)) {
            options.cert = fs.readFileSync(certfile);
        } else {
            throw new Error('Certificate file "' + certfile + '" does not exist');
        }
        break;
    case "-d":
        var dir = nextArg(".");
        app = strata.file(utils.notFound, dir);
        app = strata.directory(app, dir);
        app = strata.commonLogger(app);
        break;
    case "-h":
    case "--help":
        printUsage();
        exit = true;
        break;
    case "-k":
    case "--key":
        var keyfile = nextArg();
        if (path.existsSync(keyfile)) {
            options.key = fs.readFileSync(keyfile);
        } else {
            throw new Error('Key file "' + keyfile + '" does not exist');
        }
        break;
    case "-p":
    case "--port":
        options.port = nextArg();
        break;
    case "-s":
    case "--socket":
        options.socket = nextArg();
        break;
    case "-v":
    case "--version":
        console.log(strata.version.join("."));
        exit = true;
        break;
    default:
        appfile = path.resolve(arg);
    }
}

if (!exit) {
    if (!app) {
        try {
            app = require(appfile);
        } catch (e) {
            throw new Error('Application file "' + appfile + '" does not exist');
        }
    }

    strata.run(app, options);
}

function printUsage() {
    var usage = [
        "strata v. " + strata.version.join("."),
        "Usage: strata [options] [appfile]",
        "",
        "  Starts the Strata application contained in the given appfile.",
        "  If none is given, uses ./app.js.",
        "",
        "Options:",
        "  -a, --address   The address to bind to (defaults to 0.0.0.0)",
        "  -c, --cert      The name of the public key certificate file",
        "                  (HTTPS only)",
        "  -d              The path to a directory to serve (defaults to .). If",
        "                  this is given the appfile is ignored",
        "  -h, --help      Show this help message and exit",
        "  -k, --key       The name of the private key file (HTTPS only)",
        "  -p, --port      The port number to listen on (defaults to 1982)",
        "  -s, --socket    The unix socket to listen to. If this is given",
        "                  the -a and -p options are ignored",
        "  -v, --version   Show the current version of Strata and exit"
    ];

    console.log(usage.join("\n"));
}
